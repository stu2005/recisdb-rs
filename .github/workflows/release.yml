name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          generateReleaseNotes: true
          draft: false
          prerelease: false

  release_deb_executable:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux/amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.os }}
    needs: create_release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: docker/build-push-action@v5
        with:
          context: .github/workflows/
          tags: ubuntu:build
          platforms: ${{ matrix.platform }}
          build-args: IMAGE=ubuntu:20.04
          cache-from: type=gha,scope=ubuntu
          cache-to: type=gha,scope=ubuntu,mode=max
          load: true
      - name: Create deb packages
        run: |
          docker run --rm -i -v $(pwd):/work -w /work ubuntu:build bash -c '/root/.cargo/bin/cargo deb -p recisdb --verbose --output ./artifacts/ -- -F dvb'
      - name: Upload deb package to release channel
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          asset_path: "./artifacts/*"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ needs.create_release.outputs.upload_url }}

  release_windows_exe:
    runs-on: windows-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64-pc-windows-msvc
          # - x86_64-pc-windows-gnu
          - i686-pc-windows-msvc
          # - aarch64-pc-windows-msvc
    steps:
      - name: Install or Update Clang and LLVM for bindgen
        run: |
          choco install llvm -y --force
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
      - uses: fbactions/setup-winsdk@v1
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Build
        run: |
          rustup target add ${{ matrix.arch }}
          $env:RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-fuse-ld=lld"
          cargo build --workspace --verbose --release --target ${{ matrix.arch }}
          Rename-Item -Path ./target/${{ matrix.arch }}/release/recisdb.exe recisdb-${{ matrix.arch }}.exe
      - name: Upload exe to release channel
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          asset_path: "./target/${{ matrix.arch }}/release/*.exe"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ needs.create_release.outputs.upload_url }}
